// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: grpc/node.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Node_Ping_FullMethodName         = "/service.Node/Ping"
	Node_TaskExec_FullMethodName     = "/service.Node/TaskExec"
	Node_TaskExecPID_FullMethodName  = "/service.Node/TaskExecPID"
	Node_TaskExecStop_FullMethodName = "/service.Node/TaskExecStop"
	Node_ProcessStart_FullMethodName = "/service.Node/ProcessStart"
	Node_ProcessStop_FullMethodName  = "/service.Node/ProcessStop"
	Node_ProcessInfo_FullMethodName  = "/service.Node/ProcessInfo"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	TaskExec(ctx context.Context, in *TaskExecRequest, opts ...grpc.CallOption) (*TaskExecResponse, error)
	TaskExecPID(ctx context.Context, in *TaskExecPIDRequest, opts ...grpc.CallOption) (*TaskExecPIDResponse, error)
	TaskExecStop(ctx context.Context, in *TaskExecStopRequest, opts ...grpc.CallOption) (*TaskExecStopResponse, error)
	ProcessStart(ctx context.Context, in *ProcessStartRequest, opts ...grpc.CallOption) (*ProcessStartResponse, error)
	ProcessStop(ctx context.Context, in *ProcessStopRequest, opts ...grpc.CallOption) (*ProcessStopResponse, error)
	ProcessInfo(ctx context.Context, in *ProcessInfoRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Node_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TaskExec(ctx context.Context, in *TaskExecRequest, opts ...grpc.CallOption) (*TaskExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecResponse)
	err := c.cc.Invoke(ctx, Node_TaskExec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TaskExecPID(ctx context.Context, in *TaskExecPIDRequest, opts ...grpc.CallOption) (*TaskExecPIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecPIDResponse)
	err := c.cc.Invoke(ctx, Node_TaskExecPID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TaskExecStop(ctx context.Context, in *TaskExecStopRequest, opts ...grpc.CallOption) (*TaskExecStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecStopResponse)
	err := c.cc.Invoke(ctx, Node_TaskExecStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ProcessStart(ctx context.Context, in *ProcessStartRequest, opts ...grpc.CallOption) (*ProcessStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessStartResponse)
	err := c.cc.Invoke(ctx, Node_ProcessStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ProcessStop(ctx context.Context, in *ProcessStopRequest, opts ...grpc.CallOption) (*ProcessStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessStopResponse)
	err := c.cc.Invoke(ctx, Node_ProcessStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ProcessInfo(ctx context.Context, in *ProcessInfoRequest, opts ...grpc.CallOption) (*ProcessInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessInfoResponse)
	err := c.cc.Invoke(ctx, Node_ProcessInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility.
type NodeServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	TaskExec(context.Context, *TaskExecRequest) (*TaskExecResponse, error)
	TaskExecPID(context.Context, *TaskExecPIDRequest) (*TaskExecPIDResponse, error)
	TaskExecStop(context.Context, *TaskExecStopRequest) (*TaskExecStopResponse, error)
	ProcessStart(context.Context, *ProcessStartRequest) (*ProcessStartResponse, error)
	ProcessStop(context.Context, *ProcessStopRequest) (*ProcessStopResponse, error)
	ProcessInfo(context.Context, *ProcessInfoRequest) (*ProcessInfoResponse, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServer struct{}

func (UnimplementedNodeServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNodeServer) TaskExec(context.Context, *TaskExecRequest) (*TaskExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExec not implemented")
}
func (UnimplementedNodeServer) TaskExecPID(context.Context, *TaskExecPIDRequest) (*TaskExecPIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExecPID not implemented")
}
func (UnimplementedNodeServer) TaskExecStop(context.Context, *TaskExecStopRequest) (*TaskExecStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExecStop not implemented")
}
func (UnimplementedNodeServer) ProcessStart(context.Context, *ProcessStartRequest) (*ProcessStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStart not implemented")
}
func (UnimplementedNodeServer) ProcessStop(context.Context, *ProcessStopRequest) (*ProcessStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStop not implemented")
}
func (UnimplementedNodeServer) ProcessInfo(context.Context, *ProcessInfoRequest) (*ProcessInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInfo not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}
func (UnimplementedNodeServer) testEmbeddedByValue()              {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	// If the following call pancis, it indicates UnimplementedNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TaskExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TaskExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TaskExec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TaskExec(ctx, req.(*TaskExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TaskExecPID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecPIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TaskExecPID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TaskExecPID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TaskExecPID(ctx, req.(*TaskExecPIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TaskExecStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TaskExecStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TaskExecStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TaskExecStop(ctx, req.(*TaskExecStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ProcessStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ProcessStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ProcessStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ProcessStart(ctx, req.(*ProcessStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ProcessStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ProcessStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ProcessStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ProcessStop(ctx, req.(*ProcessStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ProcessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ProcessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ProcessInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ProcessInfo(ctx, req.(*ProcessInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Node_Ping_Handler,
		},
		{
			MethodName: "TaskExec",
			Handler:    _Node_TaskExec_Handler,
		},
		{
			MethodName: "TaskExecPID",
			Handler:    _Node_TaskExecPID_Handler,
		},
		{
			MethodName: "TaskExecStop",
			Handler:    _Node_TaskExecStop_Handler,
		},
		{
			MethodName: "ProcessStart",
			Handler:    _Node_ProcessStart_Handler,
		},
		{
			MethodName: "ProcessStop",
			Handler:    _Node_ProcessStop_Handler,
		},
		{
			MethodName: "ProcessInfo",
			Handler:    _Node_ProcessInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/node.proto",
}
